TODO:
-if we keep boost::variant, need to handle the bad gets
-check that addPort does not try to add at an existing location
-check that addComponent does not try to add at an existing location
-pimpl the port so that includes of Packets/Parameters are not necessary


QUESTIONS:
-need to check/manage open/close status of log,error ports?
-hide the port implementation?
-boost::ptr_map may be a bad idea b/c it internally uses void* as the pointer storage, but Container is abstract so there isn't a lot of choice
-will the port opening/closing I have work with multithreading?

Is there any way to have a nicer syntax with addComponent?  I would prefer:

addComponent(std::string name, Component& component)

to

addComponent(std::string name, Component* component)

but this creates problems with iteration, apparently having to do with the fact that the iterator over the boost::ptr_map is temporary and trying to access what's sitting in it->second gives a segfault.

I think this is by design - you shouldn't use boost::ptr_map with elements that are not heap allocated, apparently.

The only reason addPort looks nicer is because I hide the new - this is possible because there are a very limited number of port types so it is easy to do a switch in the addPort based on an enum for PORT_ID.  This same thing would not work for Component, as there is no (as yet) hierarchy of defined boxes - every box is currently a unique class derived from Component.


